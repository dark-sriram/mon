export declare enum LogLevelEnum {
    trace = 0,
    debug = 1,
    info = 2,
    warn = 3,
    error = 4
}
export type LogLevel = keyof typeof LogLevelEnum;
export type Sink = (logLevel: LogLevel, message: string, ...data: any[]) => void;
export type Logger<T extends string> = ReturnType<typeof getLogger<T>>;
export declare const getLogger: <T extends string>(scope: T, options?: {
    tags?: string[];
}) => {
    error: (message: string, ...data: any[]) => void;
    trace: (message: string, ...data: any[]) => void;
    debug: (message: string, ...data: any[]) => void;
    info: (message: string, ...data: any[]) => void;
    warn: (message: string, ...data: any[]) => void;
    withExtraTags: (...extraTags: string[]) => {
        error: (message: string, ...data: any[]) => void;
        trace: (message: string, ...data: any[]) => void;
        debug: (message: string, ...data: any[]) => void;
        info: (message: string, ...data: any[]) => void;
        warn: (message: string, ...data: any[]) => void;
        withExtraTags: /*elided*/ any;
    };
};
/**
 * Configuration options for `configureLoggers`, where keys are logger scopes.
 * The `default` scope is reserved and is used to set default options for all loggers.
 *
 * To reset a specific scope settings, set its `sink` or `level` to `null`. To reset all scopes
 * to default settings, use `restoreDefaults()` function.
 */
export type ConfigureLoggersOptions<T extends string> = T extends "default" ? never : Partial<{
    [K in T | "default"]: Partial<{
        sink: K extends "default" ? Sink : Sink | null;
        level: K extends "default" ? LogLevel : LogLevel | null;
    }>;
}>;
export declare const configureLoggers: <T extends string>(optionsByScope?: ConfigureLoggersOptions<T>) => void;
export declare const restoreDefaults: () => void;
//# sourceMappingURL=index.d.ts.map