import { isReactNative } from "./utils/is-react-native.js";
export var LogLevelEnum;
(function (LogLevelEnum) {
    LogLevelEnum[LogLevelEnum["trace"] = 0] = "trace";
    LogLevelEnum[LogLevelEnum["debug"] = 1] = "debug";
    LogLevelEnum[LogLevelEnum["info"] = 2] = "info";
    LogLevelEnum[LogLevelEnum["warn"] = 3] = "warn";
    LogLevelEnum[LogLevelEnum["error"] = 4] = "error";
})(LogLevelEnum || (LogLevelEnum = {}));
const logToConsole = (logLevel, message, ...rest) => {
    let logMethod;
    switch (logLevel) {
        case "error":
            if (isReactNative()) {
                message = `ERROR: ${message}`;
                logMethod = console.info;
                break;
            }
            logMethod = console.error;
            break;
        case "warn":
            if (isReactNative()) {
                message = `WARN: ${message}`;
                logMethod = console.info;
                break;
            }
            logMethod = console.warn;
            break;
        case "info":
            logMethod = console.info;
            break;
        case "trace":
            logMethod = console.trace;
            break;
        default:
            logMethod = console.log;
            break;
    }
    logMethod(message, ...rest);
};
const DEFAULT_LOG_LEVEL = "info";
const DEFAULT_SINK = logToConsole;
const sinkByScope = new Map([["default", DEFAULT_SINK]]);
const logLevelByScope = new Map([["default", DEFAULT_LOG_LEVEL]]);
export const getLogger = (scope, options = {}) => {
    const tagString = (options.tags ?? []).filter(Boolean).join(",");
    const constructLogFunction = (logLevel) => (message, ...data) => {
        const scopedLogLevel = logLevelByScope.get(scope) ?? logLevelByScope.get("default");
        if (LogLevelEnum[logLevel] >= LogLevelEnum[scopedLogLevel]) {
            const scopedSink = sinkByScope.get(scope) ?? sinkByScope.get("default");
            scopedSink(logLevel, `[${scope}]${tagString.length ? `(${tagString})` : ""}: ${message}`, ...data);
        }
    };
    return {
        withExtraTags: (...extraTags) => {
            return getLogger(scope, {
                ...options,
                tags: options.tags ? options.tags.concat(extraTags) : extraTags,
            });
        },
        ...{
            error: constructLogFunction("error"),
            trace: constructLogFunction("trace"),
            debug: constructLogFunction("debug"),
            info: constructLogFunction("info"),
            warn: constructLogFunction("warn"),
        },
    };
};
export const configureLoggers = (optionsByScope) => {
    for (const scope in optionsByScope) {
        const options = optionsByScope[scope];
        if (options.sink) {
            sinkByScope.set(scope, options.sink);
        }
        else if (options.sink === null && scope !== "default") {
            sinkByScope.delete(scope);
        }
        if (options.level) {
            logLevelByScope.set(scope, options.level);
        }
        else if (options.level === null && scope !== "default") {
            logLevelByScope.delete(scope);
        }
    }
};
export const restoreDefaults = () => {
    sinkByScope.clear();
    logLevelByScope.clear();
    sinkByScope.set("default", DEFAULT_SINK);
    logLevelByScope.set("default", DEFAULT_LOG_LEVEL);
};
//# sourceMappingURL=index.js.map